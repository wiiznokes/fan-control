name: Release

on:
  workflow_dispatch:

permissions:
  contents: write

env:
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  CARGO_TERM_COLOR: always

jobs:
  # ci:
  #   uses: ./.github/workflows/ci.yml

  commit-changes:
    # needs:
    #   - ci

    runs-on: ubuntu-latest

    outputs:
      version: ${{ steps.identify.outputs.version }}

    steps:
      - uses: actions/checkout@v4
        with:
          # https://github.com/actions/checkout/issues/1471
          fetch-tags: true
          fetch-depth: 0

      - uses: taiki-e/install-action@v2
        with:
          tool: changelog-gen

      - id: identify
        run: |

          echo "VERSION="$(date +"%-y.%-m.%-d")"" >> $GITHUB_ENV
          echo "RELEASE_DATE="$(date +"%Y-%m-%d")"" >> $GITHUB_ENV

          sed -i '/<release /s/version="[^"]*"/version="'"${{ env.VERSION }}"'"/; /<release /s/date="[^"]*"/date="'"${{ env.RELEASE_DATE }}"'"/' "res/linux/metainfo.xml"
          sed -i '/\[package.metadata.packager\]/,/^$/s/version = ".*"/version = "'"${{ env.VERSION }}"'"/' "Cargo.toml"
          echo ${{ env.VERSION }} > VERSION

          changelog-gen generate --exclude-unidentified
          changelog-gen release --version ${{ env.VERSION }}

          echo "version=${{ env.VERSION }}" >> $GITHUB_OUTPUT

      - uses: stefanzweifel/git-auto-commit-action@v5
        with:
          commit_message: "chore(changelog): automatic release generation (skip changelog) [skip ci]"
          tagging_message: ${{ env.VERSION }}

  upload-artifacts:
    needs:
      - commit-changes
    uses: ./.github/workflows/upload_artifacts.yml
    with:
      tag: ${{ needs.commit-changes.outputs.version }}

  release-on-github:
    needs:
      - upload-artifacts
      - commit-changes

    runs-on: ubuntu-latest

    steps:
      # must be after checkout because it will remove artifacts
      - uses: actions/download-artifact@v4

      - uses: taiki-e/install-action@v2
        with:
          tool: changelog-gen

      - name: Publish release
        run: |
          changelog-gen -- show > RELEASE_CHANGELOG.md

          # https://cli.github.com/manual/gh_release_create
          gh release create ${{ needs.commit-changes.outputs.version }} --title ${{ needs.commit-changes.outputs.version }} \
            --notes-file RELEASE_CHANGELOG.md --target $GITHUB_SHA \
            ./fan-control*/*
